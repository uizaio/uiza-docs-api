## Create a live event

> REQUEST

```shell
curl -X POST \
  '<%= config[:endpoint] %>/live/entity' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "<%= config[:live_create_name] %>",
    "mode": "<%= config[:live_create_mode] %>",
    "encode": <%= config[:live_create_encode] %>,
    "dvr": <%= config[:live_create_dvr] %>,
    "description": "<%= config[:live_create_description] %>",
    "poster": "<%= config[:live_create_poster] %>",
    "thumbnail": "<%= config[:live_create_thumbnail] %>",
    "linkStream": [
      "<%= config[:live_create_link_stream] %>"
    ],
    "resourceMode": "<%= config[:live_create_resource_mode] %>"
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  name: "<%= config[:live_create_name] %>",
  mode: "<%= config[:live_create_mode] %>",
  encode: <%= config[:live_create_encode] %>,
  dvr: <%= config[:live_create_dvr] %>,
  description: "<%= config[:live_create_description] %>",
  poster: "<%= config[:live_create_poster] %>",
  thumbnail: "<%= config[:live_create_thumbnail] %>",
  linkStream: [
    "<%= config[:live_create_link_stream] %>"
  ],
  resourceMode: "<%= config[:live_create_resource_mode] %>"
}

begin
  live = Uiza::Live.create params
  puts live.id
  puts live.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.live import Live
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

live_data = {
  "name": "<%= config[:live_create_name] %>",
  "mode": "<%= config[:live_create_mode] %>",
  "encode": <%= config[:live_create_encode] %>,
  "dvr": <%= config[:live_create_dvr] %>,
  "description": "<%= config[:live_create_description] %>",
  "poster": "<%= config[:live_create_poster] %>",
  "thumbnail": "<%= config[:live_create_thumbnail] %>",
  "linkStream": [
    "<%= config[:live_create_link_stream] %>"
  ],
  "resourceMode": "<%= config[:live_create_resource_mode] %>"
}

try:
  res, status_code = Live().create(**live_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "name" => "<%= config[:live_create_name] %>",
  "mode" => "<%= config[:live_create_mode] %>",
  "encode" => <%= config[:live_create_encode] %>,
  "dvr" => <%= config[:live_create_dvr] %>,
  "description" => "<%= config[:live_create_description] %>",
  "poster" => "<%= config[:live_create_poster] %>",
  "thumbnail" => "<%= config[:live_create_thumbnail] %>",
  "linkStream" => [
    "<%= config[:live_create_link_stream] %>"
  ],
  "resourceMode" => "<%= config[:live_create_resource_mode] %>"
];

try {
  $live = Uiza\Live::create($params);

  print_r($live);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Live;
import io.uiza.model.Live.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("name", "<%= config[:live_create_name] %>");
    params.put("mode", Mode.PUSH.toString());
    params.put("encode", Encode.ENCODE.getVal());
    params.put("dvr", Dvr.ACTIVE_RECORD.getVal());
    params.put("description", "<%= config[:live_create_description] %>");
    params.put("poster", "<%= config[:live_create_poster] %>");
    params.put("thumbnail", "<%= config[:live_create_thumbnail] %>");
    params.put("linkStream", new String[] {"<%= config[:live_create_link_stream] %>"});
    params.put("resourceMode", ResourceMode.SINGLE.toString());

    try {
      JsonObject response = Live.create(params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'name': '<%= config[:live_create_name] %>',
  'mode': '<%= config[:live_create_mode] %>',
  'encode': <%= config[:live_create_encode] %>,
  'dvr': <%= config[:live_create_dvr] %>,
  'description': '<%= config[:live_create_description] %>',
  'poster': '<%= config[:live_create_poster] %>',
  'thumbnail': '<%= config[:live_create_thumbnail] %>',
  'linkStream': [
    '<%= config[:live_create_link_stream] %>'
  ],
  'resourceMode': '<%= config[:live_create_resource_mode] %>'
};

uiza.live.create(params)
  .then((res) => {
      //Identifier of event has been created
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/live"
)

func init() {
  uiza.Authorization = "<%= config[:token] %>"
}

modeType := uiza.ModeTypePull
  encodeType := uiza.EncodeTypeOne
  dvrType := uiza.DvrTypeOne
  resourceMode := uiza.ResourceModeSingle

  params := &uiza.LiveCreateParams{
    Name: uiza.String("test event"),
    Mode: &modeType,
    Encode: &encodeType,
    Dvr: &dvrType,
    Description: uiza.String("This is for test event"),
    Thumbnail: uiza.String("//image1.jpeg"),
    Poster: uiza.String("//image1.jpeg"),
    LinkStream: []*string{uiza.String("https://playlist.m3u8")},
    ResourceMode: &resourceMode,
  }
  response, err := live.Create(params)
  if err != nil {
    log.Printf("%v\n", err)
  } else {
    log.Printf("%v\n", response)
  }
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.Live.Create(new CreateLiveParameter()
  {
    Name: "<%= config[:live_create_name] %>",
    Mode: "<%= config[:live_create_mode] %>",
    Description: "<%= config[:live_create_description] %>",
    Encode: <%= config[:live_create_encode] %>,
    Dvr: <%= config[:live_create_dvr] %>,
    Poster: "<%= config[:live_create_poster] %>",
    Thumbnail: new List<string>() {"<%= config[:live_create_thumbnail] %>"},
    LinkStream: [
      "<%= config[:live_create_link_stream] %>"
    ],
    resourceMode: "<%= config[:live_create_resource_mode] %>"
  });

  Console.WriteLine(string.Format("Create Live Streaming Success New Id = {0}", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```




Creates a new live event to manage a live stream.

```IMPORTANT: Live minutes start being counted as soon as the live event starts. ```

> RESPONSE

```json
{
  "id": "<%= config[:live_create_id] %>"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/live/entity```

**ARGUMENTS**

| Parameter | Description | Required |
| ------------- | ------------- | ------------- |
| **name** *string* | The event name (limit 100 characters)|**Yes**|
| **mode** *string* | Type of event, allowed values [`pull`&vert;`push`]. <br />**Pull** links can either be a `RTMP` URL or a .m3u8 URL or a live youtube link <br />**Push**: Uiza will generate an end point. This end point can be used on Broadcasting softwares such as [OBS](https://obsproject.com/) to start your streaming. |**Yes**|
| **encode** *integer* | Set to `1` to enable live transcoding. Live transcoding will enable [Adaptive Bitrate](https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming) on the viewer's side which would help deliver a better viewing experience. When set to `0`, viewers will watch with source bitrate. |**Yes**|
| **dvr** *integer* | Decides wether to record a live stream. If set to `1`, a mp4 file will be created after the live stream ended. Set `0` to disable. |**Yes**|
| **description** *string* | An arbitrary string attached to the object. Often useful for displaying to users. | |
| **linkPublishSocial**  *array* | Info to share live into social  <span onclick="this.classList.toggle('inactive')" class = "tool-tip inactive"><br><i>**dropdown**: type of social  (youtube/facebook). <p> </p> **address:**: stream URL.  <p> </p> **streamKey:**: stream key correspond to stream URL.</i></span>| |
| **thumbnail** *string* | An URL of the image that can be used to display to end users. | |
| **linkStream** *array* | A list of streamable sources that will be used when `mode` = `pull`. |**Yes**|
| **resourceMode** *enum* | Resource mode ( ``single`` = only 1 feed & output), ``redundant`` = more than 1 feed & output to backup)|**Yes**|


**RETURNS**

Returns a live event identifier if the call succeeded.
