## Retrieve a live event

> REQUEST

```shell
curl -X GET \
  '<%= config[:endpoint] %>/live/entity?id=<%= config[:live_retrieve_id] %>' \
  -H 'Authorization: <%= config[:token] %>'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

begin
  live = Uiza::Live.retrieve "<%= config[:live_retrieve_id] %>"
  puts live.id
  puts live.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.live import Live
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

try:
  res, status_code = Live().retrieve(id="<%= config[:live_retrieve_id] %>")

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

try {
  $live = Uiza\Live::retrieve("<%= config[:live_retrieve_id] %>");

  print_r($live);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Live;
import io.uiza.model.Live.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    try {
      JsonObject response = Live.retrieve("<%= config[:live_retrieve_id] %>");
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:live_retrieve_id] %>'
};

uiza.live.retrieve(params)
  .then((res) => {
    //Identifier of live event has been retrieved
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/live"
)

func init() {
  Uiza.Authorization = "<%= config[:token] %>"
}

params := &uiza.LiveRetrieveParams{ID: uiza.String("<%= config[:live_retrieve_id] %>")}
response, err := live.Retrieve(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.Live.Retrieve(new GetLiveParameter()
  {
    Id = "<%= config[:live_retrieve_id] %>"
  });
  Console.WriteLine(string.Format("Get Category Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

Retrieves the details of an existing event. You need only provide the unique identifier of event that was returned upon Live event creation.

> RESPONSE

```json
{
  "id": "<%= config[:live_retrieve_id] %>",
  "name": "<%= config[:live_retrieve_name] %>",
  "description": "<%= config[:live_retrieve_description] %>",
  "mode": "<%= config[:live_retrieve_mode] %>",
  "resourceMode": "<%= config[:live_retrieve_resource_mode] %>",
  "encode": <%= config[:live_retrieve_encode] %>,
  "channelName": "checking-01",
  "lastPresetId": null,
  "lastFeedId": null,
  "poster": "<%= config[:live_retrieve_poster] %>",
  "thumbnail": "<%= config[:live_retrieve_thumbnail] %>",
  "linkPublishSocial": null,
  "linkStream": "[
    "<%= config[:live_retrieve_link_stream] %>"
  ]",
  "lastPullInfo": null,
  "lastPushInfo": [
    {
      streamKey: "60b47ad4-1140-4c9c-8d88-565b9215a6fa?token=d626f76ebcf32485828f046d4ff291a3&ulasId=d16196ce-e451-403f-ba4b-866fbe290398",
      "streamUrl": "rtmp://asia-southeast1-u-01-gw.uiza.io:1935/push-only"
    }
  ],
  "lastProcess": null,
  "eventType": null,
  "createdAt": "2018-06-21T14:33:36.000Z",
  "updatedAt": "2018-06-21T14:33:36.000Z"
}
```

**HTTP Request**

<span class="get-button"> GET </span>
```<%= config[:endpoint] %>/live/entity```


**ARGUMENTS**

| Parameter       | Description |
|---------------- |-------------------------|
| **id** *string* | The identifier of the live event to be retrieved.|


**RETURNS**

Returns a live event object if a valid identifier was provided.
