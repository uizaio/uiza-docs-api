## Update a live event

> REQUEST

```shell
curl -X PUT \
  '<%= config[:endpoint] %>/live/entity' \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "<%= config[:live_update_id] %>",
    "name": "<%= config[:live_update_name] %>",
    "mode": "<%= config[:live_update_mode] %>",
    "encode": <%= config[:live_update_encode] %>,
    "dvr": <%= config[:live_update_dvr] %>,
    "resourceMode": "<%= config[:live_update_resource_mode] %>"
}'
```

```ruby
require "uiza"

Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "<%= config[:live_update_id] %>",
  name: "<%= config[:live_update_name] %>",
  mode: "<%= config[:live_update_mode] %>",
  encode: <%= config[:live_update_encode] %>,
  dvr: <%= config[:live_update_dvr] %>,
  resourceMode: "<%= config[:live_update_resource_mode] %>"
}

begin
  live = Uiza::Live.update params
  puts live.id
  puts live.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.live import Live
from uiza.exceptions import ServerException

uiza.authorization = "<%= config[:token] %>"

live_data = {
  "id": "<%= config[:live_update_id] %>",
  "name": "<%= config[:live_update_name] %>",
  "mode": "<%= config[:live_update_mode] %>",
  "encode": <%= config[:live_update_encode] %>,
  "dvr": <%= config[:live_update_dvr] %>,
  "resourceMode": "<%= config[:live_update_resource_mode] %>"
}

try:
  res, status_code = Live().update(**live_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setAuthorization("<%= config[:token] %>");

$params = [
  "name" => "<%= config[:live_update_name] %>",
  "mode" => "<%= config[:live_update_mode] %>",
  "encode" => <%= config[:live_update_encode] %>,
  "dvr" => <%= config[:live_update_dvr] %>,
  "resourceMode" => "<%= config[:live_update_resource_mode] %>"
];

try {
  $live = Uiza\Live::update("<%= config[:live_update_id] %>", $params);

  print_r($live);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Live;
import io.uiza.model.Live.*;

public class Main {

  public static void main(String[] args) {
    Uiza.authorization = "<%= config[:token] %>";

    Map<String, Object> params = new HashMap<>();
    params.put("name", "<%= config[:live_update_name] %>");
    params.put("mode", Mode.PULL.toString());
    params.put("encode", Encode.NO_ENCODE.getVal());
    params.put("dvr", Dvr.ACTIVE_RECORD.getVal());
    params.put("resourceMode", ResourceMode.SINGLE.toString());

    try {
      JsonObject response = Live.update("<%= config[:live_update_id] %>", params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');

uiza.authorization('<%= config[:token] %>');

const params = {
  'id': '<%= config[:live_update_id] %>',
  'name': '<%= config[:live_update_name] %>',
  'mode': '<%= config[:live_update_mode] %>',
  'encode': <%= config[:live_update_encode] %>,
  'dvr': <%= config[:live_update_dvr] %>,
  'resourceMode': '<%= config[:live_update_resource_mode] %>'
};

uiza.live.update(params)
  .then((res) => {
    //Identifier of event has been updated
  }).catch((err) => {
    //Error
  });
```

```go
package main

import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/live"
  "log"
)

func init() {
  uiza.Authorization = "<%= config[:token] %>"
}

func main() {
  dvrType := uiza.DvrTypeOne
  modeType := uiza.ModeTypePull
  encodeType := uiza.EncodeTypeOne
  resourceMode := uiza.ResourceModeSingle
  params := &uiza.LiveUpdateParams{
    ID: uiza.String("<%= config[:live_update_id] %>"),
    Name: uiza.String("<%= config[:live_update_name] %>"),
    Mode: &modeType,
    Encode: &encodeType,
    Dvr: &dvrType,
    ResourceMode: &resourceMode,
  }
  response, err := live.Update(params)
  if err != nil {
    log.Printf("%v\n", err)
  } else {
    log.Printf("%v\n", response)
  }
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  Authorization = "<%= config[:token] %>"
});

try
{
  var result = UizaServices.Live.Update(new UpdateLiveParameter()
  {
    Id = "<%= config[:live_update_id] %>",
    Name: "<%= config[:live_update_name] %>",
    Mode: "<%= config[:live_update_mode] %>",
    Encode: <%= config[:live_update_encode] %>,
    Dvr: <%= config[:live_update_dvr] %>,
    resourceMode: "<%= config[:live_update_resource_mode] %>"
  });

  Console.WriteLine(string.Format("Update Category Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

Updates the specified live event by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

> RESPONSE

```json
{
  "id": "<%= config[:live_update_id] %>"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/live/entity```

**ARGUMENTS**

| Parameter     | Description | Required |
| ------------- | ------------- | ------------- |
| **id** *string* | The identifier of the live event |**Yes**|
| **name** *string* | The event's name (limit 100 characters) |**Yes**|
| **description** *string* | An arbitrary string attached to the object. Often useful for displaying to users. | **YES** |
| **dvr** *integer* | Decides wether to record a live stream. If set to `1`, a mp4 file will be created after the live stream ended. Set `0` to disable. | **YES** |
| **mode** *string* | Type of event, allowed values [`pull`&vert;`push`]. <br />**Pull** links can either be a `RTMP` URL or a .m3u8 URL or a live youtube link <br />**Push**: Uiza will generate an end point. This end point can be used on Broadcasting softwares such as [OBS](https://obsproject.com/) to start your streaming. | **YES** |
| **encode** *integer* | Set to `1` to enable live transcoding. Live transcoding will enable [Adaptive Bitrate](https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming) on the viewer's side which would help deliver a better viewing experience. When set to `0`, viewers will watch with source bitrate. | **Yes** |
| **resourceMode** *enum* | Resource mode ( ``single`` = only 1 feed & output), ``redundant`` = more than 1 feed & output to backup)|**Yes**|


**RETURNS**

Returns the ID of the updated live event if the update succeeded.
